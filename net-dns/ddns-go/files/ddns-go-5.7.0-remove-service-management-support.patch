From b19d31496a6031050b91dbd02a66b2ec05ac729d Mon Sep 17 00:00:00 2001
From: Puqns67 <me@puqns67.icu>
Date: Sun, 24 Dec 2023 22:21:38 +0800
Subject: [PATCH 2/2] build: remove service management support for this build

---
 go.mod  |   3 -
 go.sum  |   5 --
 main.go | 223 +-------------------------------------------------------
 3 files changed, 1 insertion(+), 230 deletions(-)

diff --git a/go.mod b/go.mod
index 08b144c..61ea627 100644
--- a/go.mod
+++ b/go.mod
@@ -3,10 +3,7 @@ module github.com/jeessy2/ddns-go/v5
 go 1.20
 
 require (
-	github.com/kardianos/service v1.2.2
 	github.com/wagslane/go-password-validator v0.3.0
 	golang.org/x/net v0.19.0
 	gopkg.in/yaml.v3 v3.0.1
 )
-
-require golang.org/x/sys v0.15.0 // indirect
diff --git a/go.sum b/go.sum
index ff968b0..802389b 100644
--- a/go.sum
+++ b/go.sum
@@ -1,12 +1,7 @@
-github.com/kardianos/service v1.2.2 h1:ZvePhAHfvo0A7Mftk/tEzqEZ7Q4lgnR8sGz4xu1YX60=
-github.com/kardianos/service v1.2.2/go.mod h1:CIMRFEJVL+0DS1a3Nx06NaMn4Dz63Ng6O7dl0qH0zVM=
 github.com/wagslane/go-password-validator v0.3.0 h1:vfxOPzGHkz5S146HDpavl0cw1DSVP061Ry2PX0/ON6I=
 github.com/wagslane/go-password-validator v0.3.0/go.mod h1:TI1XJ6T5fRdRnHqHt14pvy1tNVnrwe7m3/f1f2fDphQ=
 golang.org/x/net v0.19.0 h1:zTwKpTd2XuCqf8huc7Fo2iSy+4RHPd10s4KzeTnVr1c=
 golang.org/x/net v0.19.0/go.mod h1:CfAk/cbD4CthTvqiEl8NpboMuiuOYsAr/7NOjZJtv1U=
-golang.org/x/sys v0.0.0-20201015000850-e3ed0017c211/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.15.0 h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=
-golang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
 gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
diff --git a/main.go b/main.go
index 5b164ba..eae04be 100644
--- a/main.go
+++ b/main.go
@@ -8,7 +8,6 @@ import (
 	"net"
 	"net/http"
 	"os"
-	"os/exec"
 	"path/filepath"
 	"strconv"
 	"strings"
@@ -18,7 +17,6 @@ import (
 	"github.com/jeessy2/ddns-go/v5/dns"
 	"github.com/jeessy2/ddns-go/v5/util"
 	"github.com/jeessy2/ddns-go/v5/web"
-	"github.com/kardianos/service"
 )
 
 // ddns-go 版本
@@ -34,9 +32,6 @@ var every = flag.Int("f", 300, "同步间隔时间(秒)")
 // 缓存次数
 var ipCacheTimes = flag.Int("cacheTimes", 5, "间隔N次与服务商比对")
 
-// 服务管理
-var serviceType = flag.String("s", "", "服务管理, 支持install, uninstall, restart")
-
 // 配置文件路径
 var configFilePath = flag.String("c", util.GetConfigFilePathDefault(), "自定义配置文件路径")
 
@@ -83,34 +78,7 @@ func main() {
 		}
 	}
 	os.Setenv(util.IPCacheTimesENV, strconv.Itoa(*ipCacheTimes))
-	switch *serviceType {
-	case "install":
-		installService()
-	case "uninstall":
-		uninstallService()
-	case "restart":
-		restartService()
-	default:
-		if util.IsRunInDocker() {
-			run()
-		} else {
-			s := getService()
-			status, _ := s.Status()
-			if status != service.StatusUnknown {
-				// 以服务方式运行
-				s.Run()
-			} else {
-				// 非服务方式运行
-				switch s.Platform() {
-				case "windows-service":
-					log.Println("可使用 .\\ddns-go.exe -s install 安装服务运行")
-				default:
-					log.Println("可使用 sudo ./ddns-go -s install 安装服务运行")
-				}
-				run()
-			}
-		}
-	}
+	run()
 }
 
 func run() {
@@ -168,131 +136,6 @@ func runWebServer() error {
 	return http.Serve(l, nil)
 }
 
-type program struct{}
-
-func (p *program) Start(s service.Service) error {
-	// Start should not block. Do the actual work async.
-	go p.run()
-	return nil
-}
-func (p *program) run() {
-	run()
-}
-func (p *program) Stop(s service.Service) error {
-	// Stop should not block. Return with a few seconds.
-	return nil
-}
-
-func getService() service.Service {
-	options := make(service.KeyValue)
-	var depends []string
-
-	// 确保服务等待网络就绪后再启动
-	switch service.ChosenSystem().String() {
-	case "unix-systemv":
-		options["SysvScript"] = sysvScript
-	case "windows-service":
-		// 将 Windows 服务的启动类型设为自动(延迟启动)
-		options["DelayedAutoStart"] = true
-	default:
-		// 向 Systemd 添加网络依赖
-		depends = append(depends, "Requires=network.target",
-			"After=network-online.target")
-	}
-
-	svcConfig := &service.Config{
-		Name:         "ddns-go",
-		DisplayName:  "ddns-go",
-		Description:  "简单好用的DDNS。自动更新域名解析到公网IP(支持阿里云、腾讯云dnspod、Cloudflare、Callback、华为云、百度云、Porkbun、GoDaddy、Google Domain)",
-		Arguments:    []string{"-l", *listen, "-f", strconv.Itoa(*every), "-cacheTimes", strconv.Itoa(*ipCacheTimes), "-c", *configFilePath},
-		Dependencies: depends,
-		Option:       options,
-	}
-
-	if *noWebService {
-		svcConfig.Arguments = append(svcConfig.Arguments, "-noweb")
-	}
-
-	if *skipVerify {
-		svcConfig.Arguments = append(svcConfig.Arguments, "-skipVerify")
-	}
-
-	if *customDNSServer != "" {
-		svcConfig.Arguments = append(svcConfig.Arguments, "-dns", *customDNSServer)
-	}
-
-	prg := &program{}
-	s, err := service.New(prg, svcConfig)
-	if err != nil {
-		log.Fatalln(err)
-	}
-	return s
-}
-
-// 卸载服务
-func uninstallService() {
-	s := getService()
-	s.Stop()
-	if service.ChosenSystem().String() == "unix-systemv" {
-		if _, err := exec.Command("/etc/init.d/ddns-go", "stop").Output(); err != nil {
-			log.Println(err)
-		}
-	}
-	if err := s.Uninstall(); err == nil {
-		log.Println("ddns-go 服务卸载成功!")
-	} else {
-		log.Printf("ddns-go 服务卸载失败, ERR: %s\n", err)
-	}
-}
-
-// 安装服务
-func installService() {
-	s := getService()
-
-	status, err := s.Status()
-	if err != nil && status == service.StatusUnknown {
-		// 服务未知，创建服务
-		if err = s.Install(); err == nil {
-			s.Start()
-			log.Println("安装 ddns-go 服务成功! 请打开浏览器并进行配置。")
-			if service.ChosenSystem().String() == "unix-systemv" {
-				if _, err := exec.Command("/etc/init.d/ddns-go", "enable").Output(); err != nil {
-					log.Println(err)
-				}
-				if _, err := exec.Command("/etc/init.d/ddns-go", "start").Output(); err != nil {
-					log.Println(err)
-				}
-			}
-			return
-		}
-
-		log.Printf("安装 ddns-go 服务失败, ERR: %s\n", err)
-	}
-
-	if status != service.StatusUnknown {
-		log.Println("ddns-go 服务已安装, 无需再次安装")
-	}
-}
-
-// 重启服务
-func restartService() {
-	s := getService()
-	status, err := s.Status()
-	if err == nil {
-		if status == service.StatusRunning {
-			if err = s.Restart(); err == nil {
-				log.Println("重启 ddns-go 服务成功!")
-			}
-		} else if status == service.StatusStopped {
-			if err = s.Start(); err == nil {
-				log.Println("启动 ddns-go 服务成功!")
-			}
-		}
-	} else {
-		log.Println("ddns-go 服务未安装, 请先安装服务")
-	}
-}
-
 // 打开浏览器
 func autoOpenExplorer() {
 	_, err := config.GetConfigCached()
@@ -315,67 +158,3 @@ func autoOpenExplorer() {
 		}
 	}
 }
-
-const sysvScript = `#!/bin/sh /etc/rc.common
-DESCRIPTION="{{.Description}}"
-cmd="{{.Path}}{{range .Arguments}} {{.|cmd}}{{end}}"
-name="ddns-go"
-pid_file="/var/run/$name.pid"
-stdout_log="/var/log/$name.log"
-stderr_log="/var/log/$name.err"
-START=99
-get_pid() {
-    cat "$pid_file"
-}
-is_running() {
-    [ -f "$pid_file" ] && cat /proc/$(get_pid)/stat > /dev/null 2>&1
-}
-start() {
-	if is_running; then
-		echo "Already started"
-	else
-		echo "Starting $name"
-		{{if .WorkingDirectory}}cd '{{.WorkingDirectory}}'{{end}}
-		$cmd >> "$stdout_log" 2>> "$stderr_log" &
-		echo $! > "$pid_file"
-		if ! is_running; then
-			echo "Unable to start, see $stdout_log and $stderr_log"
-			exit 1
-		fi
-	fi
-}
-stop() {
-	if is_running; then
-		echo -n "Stopping $name.."
-		kill $(get_pid)
-		for i in $(seq 1 10)
-		do
-			if ! is_running; then
-				break
-			fi
-			echo -n "."
-			sleep 1
-		done
-		echo
-		if is_running; then
-			echo "Not stopped; may still be shutting down or shutdown may have failed"
-			exit 1
-		else
-			echo "Stopped"
-			if [ -f "$pid_file" ]; then
-				rm "$pid_file"
-			fi
-		fi
-	else
-		echo "Not running"
-	fi
-}
-restart() {
-	stop
-	if is_running; then
-		echo "Unable to stop, will not attempt to start"
-		exit 1
-	fi
-	start
-}
-`
-- 
2.43.0

